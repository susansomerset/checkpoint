"use client";

import dynamic from 'next/dynamic';
import { useStudent } from '@/contexts/StudentContext';
import { getRadialVM } from '@/selectors/cache';
import JsonView from '@uiw/react-json-view';

// Force dynamic rendering to prevent static generation issues
export const dynamic = 'force-dynamic';

export default function ScratchpadPage() {
  const studentContext = useStudent();

  // Early return if no context data during static generation
  if (!studentContext) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-3xl font-bold text-gray-900 mb-6">CourseRadialCard Data Viewer</h1>
          <div className="bg-white rounded-lg shadow p-6">
            <p className="text-gray-600">Loading student context...</p>
          </div>
        </div>
      </div>
    );
  }

  // Get CourseRadialCard data for the first student and their courses
  const getCourseRadialData = () => {
    if (!studentContext?.data || !studentContext?.selectedStudentId) {
      return { message: "No student selected or no data available" };
    }

    // Check if students data exists and is not null/undefined
    if (!studentContext.data.students || typeof studentContext.data.students !== 'object') {
      return { message: "No students data available" };
    }

    const student = studentContext.data.students[studentContext.selectedStudentId!];
    if (!student?.courses) {
      return { message: "No courses found for selected student" };
    }

    const courseData = Object.entries(student.courses).map(([courseId, course]) => {
      try {
        const vm = getRadialVM(studentContext.data!, studentContext.selectedStudentId!, courseId);
        return {
          courseId,
          period: course.meta?.period || 0,
          shortName: course.meta?.shortName || 'Unknown Course',
          teacher: course.meta?.teacher || 'Unknown Teacher',
          radialVM: vm
        };
      } catch {
        return {
          courseId,
          period: course.meta?.period || 0,
          shortName: course.meta?.shortName || 'Unknown Course',
          teacher: course.meta?.teacher || 'Unknown Teacher',
          radialVM: { error: 'Failed to generate VM' }
        };
      }
    }).sort((a, b) => {
      // Convert periods to numbers for proper sorting
      const periodA = typeof a.period === 'number' ? a.period : 
                     (typeof a.period === 'string' && !isNaN(Number(a.period))) ? Number(a.period) : 999;
      const periodB = typeof b.period === 'number' ? b.period : 
                     (typeof b.period === 'string' && !isNaN(Number(b.period))) ? Number(b.period) : 999;
      
      // Sort by period number, with non-numeric values (like 'tbd') at the end
      return periodA - periodB;
    });

    return courseData;
  };

  const courseRadialData = getCourseRadialData();

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-6">CourseRadialCard Data Viewer</h1>
        
        <div className="bg-white rounded-lg shadow p-6">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">CourseRadialCard Keys and Values</h2>
          
          <div className="space-y-4">
            <div>
              <h3 className="text-lg font-medium text-gray-700 mb-2">Context State:</h3>
              <div className="bg-gray-100 p-4 rounded border">
                <JsonView 
                  value={{
                    selectedStudentId: studentContext?.selectedStudentId || null,
                    studentsCount: studentContext?.students?.length || 0,
                    hasData: !!studentContext?.data,
                    loading: studentContext?.loading || false,
                    error: studentContext?.error || null
                  }}
                  style={{
                    backgroundColor: 'transparent',
                    fontSize: '14px'
                  }}
                />
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium text-gray-700 mb-2">CourseRadialCard Data (Sorted by Period):</h3>
              <div className="bg-gray-100 p-4 rounded border max-h-96 overflow-auto">
                <JsonView 
                  value={courseRadialData}
                  style={{
                    backgroundColor: 'transparent',
                    fontSize: '14px'
                  }}
                />
              </div>
            </div>

            <div>
              <h3 className="text-lg font-medium text-gray-700 mb-2">Raw Student Data (First Student):</h3>
              <div className="bg-gray-100 p-4 rounded border max-h-96 overflow-auto">
                <JsonView 
                  value={studentContext?.selectedStudentId ? 
                    (studentContext?.data?.students?.[studentContext.selectedStudentId] || undefined) : 
                    (studentContext?.data?.students && typeof studentContext.data.students === 'object' ? 
                      Object.values(studentContext.data.students)[0] || undefined :
                      undefined)
                  }
                  style={{
                    backgroundColor: 'transparent',
                    fontSize: '14px'
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
