{
  "specs": {
    "processing.getDetailRows": {
      "id": "processing.getDetailRows",
      "version": "1.0.0",
      "kind": "processing",
      "title": "Flatten selected student's courses/assignments into DetailRow[] (pure)",
      "deps": [
        "data.studentData@^1.0.0"
      ],
      "contracts": {
        "touch": [
          { "$ref": "node:data.studentData@^1.0.0#types.Student" }
        ],
        "produces": {
          "DetailRow": {
            "studentId": "string",
            "studentPreferredName": "string",
            "courseId": "string",
            "courseShortName": "string",
            "teacherName": "string",
            "assignmentId": "string",
            "assignmentName": "string",
            "assignmentUrl": "string",
            "checkpointStatus": "string",
            "pointsPossible?": "int",
            "pointsGraded": "int",
            "gradePct?": "int",
            "dueAtISO?": "iso8601",
            "submittedAtISO?": "iso8601",
            "gradedAtISO?": "iso8601",
            "dueAtDisplay?": "string",
            "submittedAtDisplay?": "string",
            "gradedAtDisplay?": "string",
            "raw": {
              "student": "object",
              "course": "object",
              "assignment": "object",
              "submission?": "object"
            }
          }
        }
      },
      "signature": {
        "input": {
          "student": { "$ref": "node:data.studentData@^1.0.0#types.Student" },
          "nowISO?": "iso8601"
        },
        "output[]": { "$ref": "#contracts.produces.DetailRow" }
      },
      "processing": {
        "pipeline": [
          {
            "id": "flatten-selected-student",
            "kind": "pure",
            "rules": [
              "Require a single selected Student node; do not access context/globals.",
              "For each course in student.courses[*], and each assignment in course.assignments[*], emit one DetailRow.",
              "studentPreferredName ← student.preferredName || student.legalName || student.name || student.id.",
              "courseShortName ← course.meta?.shortName || course.canvas?.name || course.id.",
              "teacherName ← course.meta?.teacher || course.meta?.instructor || ''.",
              "assignmentUrl ← prefer assignment.canvas?.html_url; else assignment.link IF it exists AND starts with http(s).",
              "checkpointStatus ← assignment.meta?.checkpointStatus || assignment.status || ''. (Open set; do not restrict.)",
              "pointsPossible ← numeric if present and ≥0; leave undefined if not present.",
              "pointsGraded ← submissions?.graded_points || submissions?.score || 0.",
              "gradePct ← if pointsPossible>0 then round((pointsGraded/pointsPossible)*100) to 0 decimals, else undefined.",
              "dueAtISO/submittedAtISO/gradedAtISO ← valid ISO if present; omit otherwise.",
              "For each ISO date present, compute display: 'M/D' if same calendar year as now, else 'M/D/YY'.",
              "Attach raw.student/raw.course/raw.assignment/raw.submission snapshots for JSON modal."
            ]
          }
        ]
      },
      "fixtures": {
        "inputs": {
          "selected_student_small": {
            "student": "TBD_see_two_students_small_S1",
            "nowISO": "2025-10-01T12:00:00-07:00"
          }
        },
        "expectations": {
          "rows_count_gte": 5,
          "all_rows_studentId_eq_input": true,
          "no_non_http_links": true,
          "no_gradePct_when_pointsPossible_missing_or_zero": true,
          "pointsGraded_default_zero_when_missing": true,
          "display_dates_match_year_rule": true,
          "raw_objects_present": true
        }
      },
      "tests": {
        "unit": [
          { "name": "flattens_only_selected_student_subtree" },
          { "name": "prefers_canvas_html_url_then_optional_link_http_only" },
          { "name": "pointsGraded_defaults_to_zero" },
          { "name": "gradePct_integer_0decimals_only_when_possible_gt0" },
          { "name": "date_display_MslashD_same_year_else_MslashDslashYY" },
          { "name": "passes_through_arbitrary_checkpointStatus_strings" },
          { "name": "includes_raw_snapshots_for_modal" }
        ]
      },
      "guardrails": [
        "STOP_IF: function reads StudentContext or global state.",
        "STOP_IF: assignmentUrl is non-http(s).",
        "STOP_IF: gradePct is emitted when pointsPossible <= 0."
      ],
      "definition_of_done": {
        "developer_must": [
          "Export a single pure fn: getDetailRows(student, nowISO?).",
          "No filtering/sorting in this module.",
          "Add scratchpad case that renders JSON of first 10 rows."
        ]
      },
      "implementation": {
        "module": "src/lib/pure/getDetailRows.ts",
        "export": "getDetailRows",
        "pure": true
      }
    },
    "compose.detailData": {
      "id": "compose.detailData",
      "version": "1.0.1",
      "kind": "compose",
      "title": "Adapter from StudentContext → DetailRow[] for the selected student (plus static headers)",
      "deps": [
        "processing.getDetailRows@^1.0.0"
      ],
      "contracts": {
        "touch": [
          { "$ref": "node:processing.getDetailRows@^1.0.0#contracts.produces.DetailRow" }
        ],
        "produces": {
          "SelectedDetailData": {
            "rows[]": { "$ref": "node:processing.getDetailRows@^1.0.0#contracts.produces.DetailRow" },
            "selectedStudentId": "string",
            "headers": [
              "Student","Course","Teacher","Assignment","Status",
              "Points","Grade","%","Due","Turned in","Graded on"
            ]
          },
          "RawDetailSnapshot": {
            "student": {
              "studentId": "string",
              "meta": {
                "preferredName": "string",
                "legalName": "string"
              }
            },
            "course": {
              "courseId": "string",
              "meta": {
                "shortName": "string",
                "period": "string"
              },
              "canvas?": "object"
            },
            "assignment": {
              "assignmentId": "string",
              "courseId": "string",
              "canvas?": "object",
              "meta": {
                "checkpointStatus": "string"
              },
              "pointsPossible?": "int",
              "link?": "string",
              "submissions?": "Record<string,object>"
            }
          }
        }
      },
      "signature": {
        "getSelectedDetail": {
          "input": {
            "studentContext": {
              "selectedStudentId": "string|null",
              "data?": {
                "students?": "Record<studentId,StudentNode>"
              }
            },
            "nowISO?": "iso8601"
          },
          "output": { "$ref": "#contracts.produces.SelectedDetailData" }
        },
        "getRawDetailSnapshot": {
          "input": {
            "studentData": {
              "students": "Record<studentId,StudentNode>"
            },
            "studentId": "string",
            "courseId": "string",
            "assignmentId": "string"
          },
          "output": { "$ref": "#contracts.produces.RawDetailSnapshot|null" }
        }
      },
      "processing": {
        "pipeline": [
          {
            "id": "getSelectedDetail",
            "kind": "compose",
            "rules": [
              "Read { selectedStudentId, data } from studentContext.",
              "If !selectedStudentId OR !data OR !data.students, return { rows:[], selectedStudentId:'', headers:STATIC_HEADERS }.",
              "Resolve the Student node: data.students[selectedStudentId].",
              "If student not found, return { rows:[], selectedStudentId, headers:STATIC_HEADERS }.",
              "Call processing.getDetailRows(selectedStudent, nowISO).",
              "Return { rows, selectedStudentId, headers:STATIC_HEADERS }."
            ]
          },
          {
            "id": "getRawDetailSnapshot",
            "kind": "compose",
            "rules": [
              "Lazy-load function: ONLY called when user opens JSON modal for a row.",
              "Navigate studentData → students[studentId] → courses[courseId] → assignments[assignmentId].",
              "If any node missing, return null.",
              "Build snapshot with:",
              "  student: { studentId, meta } (NO nested courses)",
              "  course: { courseId, meta, canvas } (NO nested assignments)",
              "  assignment: { assignmentId, courseId, canvas, meta, pointsPossible, link, submissions }",
              "  ← assignment.meta includes checkpointStatus",
              "  ← assignment.submissions includes ALL submissions (not just first)",
              "Return snapshot for modal display."
            ]
          }
        ]
      },
      "fixtures": {
        "inputs": {
          "with_selected_student": {
            "studentContext": {
              "selectedStudentId": "S1",
              "data": {
                "students": {
                  "S1": "@processing.getWeeklyGrids.fixtures.inputs.two_students_small.studentData.students.S1"
                }
              }
            },
            "nowISO": "2025-10-01T12:00:00-07:00"
          },
          "no_selected_student": {
            "studentContext": {
              "selectedStudentId": null,
              "data": {
                "students": {
                  "S1": "@processing.getWeeklyGrids.fixtures.inputs.two_students_small.studentData.students.S1"
                }
              }
            },
            "nowISO": "2025-10-01T12:00:00-07:00"
          },
          "no_students_key": {
            "studentContext": {
              "selectedStudentId": "S1",
              "data": {}
            },
            "nowISO": "2025-10-01T12:00:00-07:00"
          },
          "raw_snapshot_request": {
            "studentData": {
              "students": {
                "S1": "@processing.getWeeklyGrids.fixtures.inputs.two_students_small.studentData.students.S1"
              }
            },
            "studentId": "S1",
            "courseId": "C-101",
            "assignmentId": "A-0"
          },
          "raw_snapshot_missing_assignment": {
            "studentData": {
              "students": {
                "S1": "@processing.getWeeklyGrids.fixtures.inputs.two_students_small.studentData.students.S1"
              }
            },
            "studentId": "S1",
            "courseId": "C-101",
            "assignmentId": "A-404"
          }
        },
        "expectations": {
          "with_selected_student": {
            "rows": {
              "length": 6,
              "first": {
                "studentId": "S1",
                "studentPreferredName": "Alice",
                "courseId": "C-101",
                "assignmentId": "A-0"
              }
            },
            "selectedStudentId": "S1",
            "headers": {
              "length": 11,
              "first": "Student",
              "last": "Graded on"
            }
          },
          "no_selected_student": {
            "rows": [],
            "selectedStudentId": "",
            "headers": { "length": 11 }
          },
          "no_students_key": {
            "rows": [],
            "selectedStudentId": "",
            "headers": { "length": 11 }
          },
          "raw_snapshot_request": {
            "student": {
              "studentId": "S1",
              "meta": {
                "preferredName": "Alice",
                "legalName": "Alice Johnson"
              }
            },
            "course": {
              "courseId": "C-101",
              "meta": {
                "shortName": "Algebra I",
                "period": "1"
              },
              "canvas": {
                "name": "Algebra I"
              }
            },
            "assignment": {
              "assignmentId": "A-0",
              "courseId": "C-101",
              "meta": {
                "checkpointStatus": "Missing"
              },
              "pointsPossible": 10,
              "submissions": {}
            }
          },
          "raw_snapshot_missing_assignment": null
        }
      },
      "tests": {
        "unit": [
          { "name": "returns_empty_rows_with_headers_when_no_selectedStudentId" },
          { "name": "returns_empty_rows_with_headers_when_selectedStudent_not_found" },
          { "name": "delegates_to_getDetailRows_when_student_exists" },
          { "name": "includes_static_headers_array_11_items" },
          { "name": "returns_selectedStudentId_in_output" },
          { "name": "returns_empty_rows_when_studentContext_data_missing_students_key" },
          { "name": "detail_rows_do_not_include_raw_field" }
        ],
        "integration": [
          { "name": "getRawDetailSnapshot_returns_null_when_ids_invalid" },
          { "name": "getRawDetailSnapshot_includes_assignment_meta_with_checkpointStatus" },
          { "name": "getRawDetailSnapshot_includes_all_submissions_not_just_first" },
          { "name": "getRawDetailSnapshot_excludes_nested_courses_and_assignments" },
          { "name": "getRawDetailSnapshot_returns_null_when_assignment_missing_but_student_and_course_exist" },
          { "name": "useRawDetailSnapshot_returns_callable_when_context_ready" }
        ]
      },
      "guardrails": [
        "STOP_IF: any filtering/sorting logic is added to getSelectedDetail.",
        "STOP_IF: module mutates studentContext.",
        "STOP_IF: getRawDetailSnapshot includes nested courses or assignments Records.",
        "STOP_IF: headers array length !== 11 or order changes.",
        "STOP_IF: DetailRow includes a 'raw' object duplicating IDs."
      ],
      "definition_of_done": {
        "developer_must": [
          "Export getSelectedDetail(studentContext, nowISO?) → { rows, selectedStudentId, headers }.",
          "Export getRawDetailSnapshot(studentData, studentId, courseId, assignmentId) → RawDetailSnapshot|null.",
          "Export useRawDetailSnapshot() hook for UI consumption.",
          "Rows have no 'raw' property; IDs live at top level.",
          "Pass ESLint, TSC, unit + integration tests."
        ],
        "po_review": [
          "Verify composeOutput includes headers array with 11 items.",
          "Verify rows match processing.getDetailRows output.",
          "Verify rows have NO raw field.",
          "Verify useRawDetailSnapshot hook returns callable.",
          "Approve before implementing ui.TableDetail."
        ]
      },
      "implementation": {
        "module": "src/lib/compose/detailData.ts",
        "exports": ["getSelectedDetail", "getRawDetailSnapshot"],
        "pure": false,
        "react_hook": {
          "module": "src/ui/hooks/useRawDetailSnapshot.ts",
          "export": "useRawDetailSnapshot",
          "description": "React hook wrapper that accesses StudentContext internally, avoiding prop drilling"
        }
      },
      "notes": {
        "lazy_loading": "getRawDetailSnapshot is only called when modal opens, not during initial row generation. This keeps getDetailRows fast.",
        "headers_static": "Headers array is static and hardcoded to ensure column order consistency.",
        "no_raw_field": "DetailRow contains IDs at top level (studentId, courseId, assignmentId). No 'raw' field duplication. Modal uses useRawDetailSnapshot hook to retrieve full data on-demand.",
        "performance": "Separating raw snapshot retrieval from row generation improves student-switching performance significantly (no blob generation upfront).",
        "layering": "Pure function (getRawDetailSnapshot) in /lib/compose for testability. React hook wrapper (useRawDetailSnapshot) in /ui/hooks for UI convenience. UI components use the hook; tests use the pure function."
      },
      "commands": {
        "play": [
          "pnpm eslint src/lib/compose/detailData.ts src/ui/hooks/useRawDetailSnapshot.ts",
          "pnpm tsc --noEmit",
          "pnpm test -t compose.detailData"
        ]
      }
    },
    "ui.DetailModal": {
      "id": "ui.DetailModal",
      "version": "1.0.1",
      "kind": "ui",
      "title": "DetailModal - Display DetailRow snapshot JSON with collapsible tree, search, and copy",
      "deps": [
        "compose.detailData@^1.0.1",
        "react-json-tree@^0.18.0"
      ],
      "contracts": {
        "touch": [
          { "$ref": "node:compose.detailData@^1.0.1#contracts.produces.RawDetailSnapshot" }
        ],
        "produces": {
          "component": "React.FunctionComponent"
        }
      },
      "signature": {
        "input": {
          "row": {
            "studentId": "string",
            "courseId": "string",
            "assignmentId": "string"
          },
          "isOpen": "boolean",
          "onClose": "() => void",
          "title?": "string"
        },
        "output": { "react": "JSX.Element|null" }
      },
      "processing": {
        "pipeline": [
          {
            "id": "fetch_snapshot",
            "kind": "ui",
            "rules": [
              "Use useRawDetailSnapshot() to obtain a getter bound to current StudentContext.",
              "If !isOpen OR !row, return null (no render, no work).",
              "When isOpen and row exist, call getSnapshot({ studentId, courseId, assignmentId }) synchronously.",
              "If snapshot is null, render a lightweight message: 'Data not available for this assignment.'"
            ]
          },
          {
            "id": "search_filter",
            "kind": "ui",
            "rules": [
              "Local state: searchQuery:string ('').",
              "Search input at top (placeholder: 'Search keys, values, IDs…').",
              "Implement case-insensitive matching against keys and stringified values.",
              "Use shouldExpandNodeInitially(nodePath, data, level) to expand nodes that match searchQuery.",
              "Optional: highlight matches via labelRenderer/valueRenderer; avoid mutating data."
            ]
          },
          {
            "id": "render_json_tree",
            "kind": "ui",
            "rules": [
              "Render JSONTree.",
              "Theme: 'monokai' (or similar high-contrast).",
              "Initial expansion when no search: expand top-level only (student, course, assignment).",
              "Container is scrollable; preserve monospace font.",
              "Do not pre-stringify snapshot for display; let JSONTree render the object."
            ]
          },
          {
            "id": "render_overlay",
            "kind": "ui",
            "rules": [
              "Full-screen overlay with semi-transparent backdrop.",
              "Backdrop click → onClose.",
              "Centered card (max-w-5xl, max-h-[90vh], overflow-auto).",
              "Header: (title || 'Assignment Detail'), close button (X).",
              "Search input below header, above JSON tree."
            ]
          },
          {
            "id": "actions",
            "kind": "ui",
            "rules": [
              "Copy button copies FULL JSON.stringify(snapshot, null, 2).",
              "Call navigator.clipboard.writeText in try/catch; on failure, fall back to a hidden <textarea> select+execCommand.",
              "Show 'Copied!' feedback for ~2000ms, then revert."
            ]
          },
          {
            "id": "keyboard_accessibility",
            "kind": "ui",
            "rules": [
              "Escape key → onClose.",
              "Focus trap: Tab cycles within modal (header buttons, search input, tree).",
              "Auto-focus search input when modal opens (after first paint).",
              "role='dialog' aria-modal='true' and aria-labelledby pointing at header id.",
              "Visible focus outlines."
            ]
          }
        ]
      },
      "fixtures": {
        "inputs": {
          "open_with_data": {
            "row": { "studentId": "S1", "courseId": "C-101", "assignmentId": "A-0" },
            "isOpen": true,
            "onClose": "jest.fn()",
            "title": "Assignment Detail"
          },
          "closed": {
            "row": null,
            "isOpen": false,
            "onClose": "jest.fn()"
          }
        },
        "expectations": {
          "open_with_data": {
            "renders": "overlay with header, search input, copy/close buttons, JSONTree",
            "json_content": "student, course, assignment nodes (top-level expanded, nested collapsed)",
            "search": "expands nodes containing matches (optional highlight via renderers)"
          },
          "closed": { "renders": "null" }
        }
      },
      "tests": {
        "unit": [
          { "name": "returns_null_when_not_open" },
          { "name": "displays_json_tree_when_open_and_data_available" },
          { "name": "displays_fallback_when_snapshot_null" },
          { "name": "calls_onClose_when_backdrop_clicked" },
          { "name": "calls_onClose_when_close_button_clicked" },
          { "name": "calls_onClose_when_escape_pressed" },
          { "name": "copy_button_copies_full_json_to_clipboard" },
          { "name": "search_input_expands_matching_nodes" },
          { "name": "copy_feedback_shows_copied_for_2_seconds" },
          { "name": "does_not_mount_tree_when_closed" }
        ],
        "integration": [
          { "name": "uses_useRawDetailSnapshot_hook_to_fetch_data" },
          { "name": "focus_trap_keeps_tab_within_modal" },
          { "name": "auto_focuses_search_input_on_open" },
          { "name": "aria_labels_and_roles_are_present" }
        ]
      },
      "guardrails": [
        "STOP_IF: modal renders or mounts JSON tree when isOpen=false.",
        "STOP_IF: any data fetching/snapshot work occurs when isOpen=false.",
        "STOP_IF: backdrop/escape do not call onClose.",
        "STOP_IF: focus can escape modal when open.",
        "STOP_IF: copy button copies filtered/partial JSON (must copy full snapshot).",
        "STOP_IF: search mutates snapshot object."
      ],
      "definition_of_done": {
        "developer_must": [
          "Install react-json-tree: npm i react-json-tree.",
          "Return null when !isOpen or !row.",
          "Use useRawDetailSnapshot hook (no studentData prop).",
          "Render JSONTree with theme and shouldExpandNodeInitially search expansion.",
          "Backdrop, close button, escape handlers implemented.",
          "Copy full JSON with 'Copied!' feedback and clipboard fallback.",
          "Focus trap, auto-focus search input, role/aria wired.",
          "Pass ESLint, TSC, unit + integration tests."
        ],
        "po_review": [
          "Open/close behavior is smooth; nothing renders when closed.",
          "JSON tree shows student.meta, course.meta, assignment.meta.checkpointStatus, assignment.submissions.",
          "Search expands matches (highlight if implemented).",
          "Copy copies full JSON and shows feedback.",
          "Esc/backdrop close; tab key stays within modal; search input focused on open."
        ]
      },
      "implementation": {
        "module": "src/ui/components/DetailModal.tsx",
        "export": "DetailModal",
        "layer": "ui",
        "tags": ["modal", "json", "collapsible", "search", "detail"],
        "dependencies": {
          "react-json-tree": "^0.18.0"
        }
      },
      "notes": {
        "library": "react-json-tree provides collapsible JSON with themes; use labelRenderer/valueRenderer for optional match highlighting.",
        "lazy_load": "Only compute snapshot when isOpen=true and row present.",
        "clipboard": "Include fallback for non-secure contexts or clipboard API failures.",
        "performance": "Avoid JSON.stringify on every render; stringify only on copy.",
        "layering": "Lives in src/ui/components/ (not src/components/) to maintain UI layer separation."
      },
      "commands": {
        "play": [
          "npm i react-json-tree",
          "pnpm eslint src/ui/components/DetailModal.tsx",
          "pnpm tsc --noEmit",
          "pnpm test -t ui.DetailModal"
        ]
      }
    },
    "ui.TableDetail": {
      "id": "ui.TableDetail",
      "version": "1.0.2",
      "kind": "ui",
      "title": "Detail table: self-contained filtering, sorting, rendering, and JSON modal",
      "deps": [
        "processing.getDetailRows@^1.0.0",
        "ui.DetailModal@^1.0.1"
      ],
      "contracts": {
        "touch": [
          { "$ref": "node:processing.getDetailRows@^1.0.0#contracts.produces.DetailRow" },
          { "$ref": "node:ui.DetailModal@^1.0.1#contracts.produces.component" }
        ],
        "produces": {
          "component": "React.FunctionComponent"
        }
      },
      "signature": {
        "input": {
          "baseHeaders": [
            "Student","Course","Teacher","Assignment","Status",
            "Points","Grade","%","Due","Turned in","Graded on"
          ],
          "rows[]": { "$ref": "node:processing.getDetailRows@^1.0.0#contracts.produces.DetailRow" },
          "selectedStudentId": "string",
          "initialSort?": { "by": "string", "dir": "enum[asc|desc]" }
        },
        "output": { "react": "JSX.Element" }
      },
      "processing": {
        "pipeline": [
          {
            "id": "derive_display_headers",
            "kind": "ui",
            "rules": [
              "Derive headers at render time: const headers = [...baseHeaders, 'Actions'].",
              "baseHeaders must be exactly 11 items in canonical order (from compose.detailData).",
              "Actions column is NOT sortable (skip in sort logic)."
            ]
          },
          {
            "id": "derive_filter_options",
            "kind": "ui",
            "rules": [
              "Course options: unique by courseId → { courseId, label: '${courseShortName} (${teacherName})' }, sorted by label asc.",
              "Status options: unique set of checkpointStatus strings (open set, no restrictions), sorted alphabetically."
            ]
          },
          {
            "id": "local_state",
            "kind": "ui",
            "rules": [
              "Local state: selectedCourseIds:string[], selectedStatuses:string[], q:string, sort:{by,dir}, modalRow:{studentId,courseId,assignmentId}|null.",
              "Default sort: initialSort || {by:'Due', dir:'asc'}.",
              "When selectedStudentId changes (via useEffect), reset: selectedCourseIds=[], selectedStatuses=[], q='', sort=default, modalRow=null."
            ]
          },
          {
            "id": "filter_and_sort",
            "kind": "ui",
            "rules": [
              "Start from input rows.",
              "Course filter: if selectedCourseIds.length>0, keep rows where courseId ∈ selectedCourseIds.",
              "Status filter: if selectedStatuses.length>0, keep rows where checkpointStatus ∈ selectedStatuses.",
              "Keyword q: tokenize by whitespace; ALL tokens must match (case-insensitive) at least one of:",
              "  - Text fields: assignmentName, courseShortName, teacherName, checkpointStatus, studentPreferredName",
              "  - Date displays: dueAtDisplay, submittedAtDisplay, gradedAtDisplay",
              "  - Date ISOs: dueAtISO, submittedAtISO, gradedAtISO",
              "  - IDs: studentId, courseId, assignmentId",
              "  - Numeric fields: coerce pointsPossible, pointsGraded, gradePct to strings once (not per render).",
              "Stable sort by column key (baseHeaders only, Actions is non-sortable):",
              "  'Student'    → studentPreferredName (localeCompare)",
              "  'Course'     → courseShortName (localeCompare)",
              "  'Teacher'    → teacherName (localeCompare)",
              "  'Assignment' → assignmentName (localeCompare)",
              "  'Status'     → checkpointStatus (localeCompare)",
              "  'Points'     → pointsPossible (numeric; undefined last on asc, first on desc)",
              "  'Grade'      → pointsGraded (numeric; undefined last on asc, first on desc)",
              "  '%'          → gradePct (numeric; undefined last on asc, first on desc)",
              "  'Due'        → dueAtISO (chronological; undefined last on asc, first on desc)",
              "  'Turned in'  → submittedAtISO (chronological; undefined last/first)",
              "  'Graded on'  → gradedAtISO (chronological; undefined last/first)",
              "Toggle sort direction on repeated header clicks."
            ]
          },
          {
            "id": "render_filters",
            "kind": "ui",
            "rules": [
              "Filter row above table:",
              "  Course multi-select dropdown (show selected count when >0: 'Courses (2)').",
              "  Status multi-select dropdown (show selected count: 'Statuses (1)').",
              "  Keyword search input (placeholder: 'Search assignments, courses, teachers, IDs…').",
              "  Clear Filters button (visible only when any filter active).",
              "Show filtered row count: 'Showing X of Y assignments'."
            ]
          },
          {
            "id": "render_table",
            "kind": "ui",
            "rules": [
              "Semantic <table> with <caption>, <thead>, <tbody>.",
              "Caption (sr-only): 'Detail view: {Y} total assignments for {selectedStudentId}'.",
              "Column headers from derived headers (12 items); clicking baseHeaders toggles sort; Actions is not clickable.",
              "Apply aria-sort on the active sortable header: 'ascending'|'descending'.",
              "Show sort indicator (↑/↓) on active sort column.",
              "Each <tr> uses a stable key: `${studentId}:${courseId}:${assignmentId}`.",
              "Cells:",
              "  Student → studentPreferredName",
              "  Course → courseShortName",
              "  Teacher → teacherName",
              "  Assignment → <a href=assignmentUrl target=_blank rel=noopener>{assignmentName}</a> (validate URL with try/catch; render plain text if invalid)",
              "  Status → checkpointStatus",
              "  Points → if both present: 'pointsGraded / pointsPossible' (e.g., '8 / 10'); if only pointsGraded: pointsGraded; if only pointsPossible: '- / pointsPossible'; if both undefined: '-'",
              "  Grade → pointsGraded or '-'",
              "  % → Math.round(gradePct) + '%' or '-'",
              "  Due/Turned in/Graded on → display fields or '-'",
              "  Actions → 🔍 magnifier button (aria-label='View details for {assignmentName}') opens DetailModal",
              "Empty state (after filters): 'No assignments match your filters.'",
              "Empty state (no rows): 'No assignments found.'"
            ]
          },
          {
            "id": "modal_integration",
            "kind": "ui",
            "rules": [
              "Import DetailModal component.",
              "Local state: modalRow:{studentId,courseId,assignmentId}|null.",
              "Render <DetailModal row={modalRow} isOpen={!!modalRow} onClose={()=>setModalRow(null)} />.",
              "Magnifier click → setModalRow({studentId, courseId, assignmentId}) from that row.",
              "Modal handles its own data fetching via useRawDetailSnapshot hook (no prop drilling)."
            ]
          },
          {
            "id": "a11y_responsive",
            "kind": "ui",
            "rules": [
              "Sticky header; horizontal overflow on narrow screens; text wraps in long cells.",
              "Keyboard-accessible: all buttons, links, dropdowns focusable with visible outlines.",
              "ARIA: role=table (implicit), columnheader scope=col with aria-sort, row/cell structure.",
              "Magnifier button: role=button, aria-label='View details for {assignmentName}'."
            ]
          }
        ]
      },
      "fixtures": {
        "inputs": {
          "small_dataset": {
            "baseHeaders": [
              "Student","Course","Teacher","Assignment","Status",
              "Points","Grade","%","Due","Turned in","Graded on"
            ],
            "rows": "@compose.detailData.fixtures.expectations.with_selected_student.rows",
            "selectedStudentId": "S1",
            "initialSort": { "by": "Due", "dir": "asc" }
          }
        },
        "expectations": {
          "derives_headers_with_actions": true,
          "derives_course_options": true,
          "derives_status_options": true,
          "filters_AND_logic": true,
          "keyword_matches_all_text_fields_and_IDs": true,
          "sorts_correctly_by_11_sortable_columns": true,
          "actions_column_not_sortable": true,
          "resets_on_selectedStudentId_change": true,
          "magnifier_opens_modal": true,
          "modal_receives_row_IDs_not_full_data": true,
          "points_cell_formats_all_4_cases": true,
          "percent_cell_rounded_to_integer": true,
          "row_keys_are_stable_composite": true,
          "aria_sort_applied_to_active_header": true
        }
      },
      "tests": {
        "unit": [
          { "name": "derives_headers_appending_actions" },
          { "name": "derives_unique_course_options_with_teacher_labels" },
          { "name": "derives_unique_status_options_sorted" },
          { "name": "rejects_baseHeaders_when_length_not_11_or_order_mismatch" },
          { "name": "actions_column_is_not_sortable" },
          { "name": "resets_filters_when_selectedStudentId_changes" },
          { "name": "filters_course_AND_status_AND_keyword" },
          { "name": "keyword_search_tokenizes_and_matches_all_fields_including_IDs" },
          { "name": "keyword_search_matches_numeric_fields_as_strings" },
          { "name": "sorts_text_columns_with_localeCompare" },
          { "name": "sorts_numeric_columns_with_undefined_handling" },
          { "name": "sorts_date_columns_chronologically" },
          { "name": "toggles_sort_direction_on_repeated_header_click" },
          { "name": "magnifier_click_sets_modalRow_state" },
          { "name": "renders_DetailModal_with_correct_props" },
          { "name": "points_cell_formats_all_4_cases" },
          { "name": "percent_cell_rounds_to_integer_no_decimals" },
          { "name": "row_key_is_composite_studentId_courseId_assignmentId" },
          { "name": "aria_sort_ascending_or_descending_on_active_column" },
          { "name": "assignment_url_validated_renders_plain_text_if_invalid" },
          { "name": "empty_state_shown_when_no_rows_after_filter" },
          { "name": "empty_state_shown_when_no_input_rows" }
        ],
        "integration": [
          { "name": "modal_opens_and_displays_snapshot_on_magnifier_click" },
          { "name": "modal_closes_and_clears_modalRow_on_onClose" },
          { "name": "filter_dropdowns_update_visible_rows" },
          { "name": "clear_filters_button_resets_all_filters" },
          { "name": "sort_persists_through_filtering" }
        ],
        "visual": [
          { "name": "table_with_filters_and_sorted_data_renders" },
          { "name": "modal_overlay_appears_on_magnifier_click" }
        ]
      },
      "guardrails": [
        "STOP_IF: component mutates input rows.",
        "STOP_IF: non-http(s) assignmentUrl is rendered as link.",
        "STOP_IF: filtering/sorting depend on external globals.",
        "STOP_IF: modal receives full StudentData as prop (should use useRawDetailSnapshot hook).",
        "STOP_IF: magnifier icon is not keyboard-accessible.",
        "STOP_IF: baseHeaders.length !== 11 or order != canonical compose headers.",
        "STOP_IF: 'Actions' column becomes sortable.",
        "STOP_IF: Points cell shows 'NaN' or invalid format.",
        "STOP_IF: aria-sort not applied to active sortable header.",
        "STOP_IF: row keys are not stable composite (must be studentId:courseId:assignmentId).",
        "STOP_IF: percent displays decimals (must be integer rounded)."
      ],
      "definition_of_done": {
        "developer_must": [
          "Derive headers: const headers = [...baseHeaders, 'Actions'].",
          "Validate baseHeaders.length === 11 at runtime (throw/warn if mismatch).",
          "Implement as self-contained component with local filter/sort/modal state.",
          "Derive course/status options from rows.",
          "Reset filters on selectedStudentId change via useEffect.",
          "Implement keyword tokenization with numeric field coercion.",
          "Implement sort for 11 sortable columns (skip Actions).",
          "Apply aria-sort to active sortable header.",
          "Use stable row keys: studentId:courseId:assignmentId.",
          "Round gradePct to integer (Math.round).",
          "Validate assignmentUrl with new URL() try/catch; render plain text if invalid.",
          "Render magnifier 🔍 in Actions column, opens DetailModal.",
          "DetailModal integration: pass {studentId, courseId, assignmentId}, no full data.",
          "Pass ESLint, TSC, unit + integration + visual tests."
        ],
        "po_review": [
          "12 columns display (11 base + Actions).",
          "Actions column has magnifier, is not sortable.",
          "Filters work independently and in combination (AND logic).",
          "Keyword search finds by name, course, teacher, status, dates, IDs, numbers.",
          "Sorting works for 11 columns (not Actions); clicking header toggles direction.",
          "aria-sort attribute changes with active column and direction.",
          "Percent displays as integer (e.g., '92%' not '92.33%').",
          "Magnifier icon opens modal with full JSON (student, course, assignment, submissions).",
          "Modal search/copy/close work correctly.",
          "Switching students clears filters and resets table.",
          "Empty states display correctly.",
          "Invalid URLs render as plain text, not broken links."
        ]
      },
      "implementation": {
        "module": "src/ui/components/TableDetail.tsx",
        "export": "TableDetail",
        "layer": "ui",
        "tags": ["table", "detail", "filtering", "sorting", "modal"],
        "dependencies": {
          "ui.DetailModal": "^1.0.1"
        }
      },
      "notes": {
        "headers": "Displayed headers = baseHeaders + 'Actions' (derived in component). Sorting applies only to baseHeaders (11 columns). Actions column is visual-only.",
        "self_contained": "All filtering, sorting, and modal state managed internally. No external dependencies except DetailModal component.",
        "performance": "Filter/sort computed on every render; acceptable for <1000 rows. Consider useMemo for larger datasets. Numeric field toString() coerced once during filter, not per cell render.",
        "modal_integration": "DetailModal uses useRawDetailSnapshot hook internally, so TableDetail only passes IDs, not data.",
        "filter_reset": "Filters reset when selectedStudentId changes (detected via useEffect dependency).",
        "keyword_search": "Searches ALL text fields, date fields (display and ISO), ID fields, and numeric fields (coerced to strings). Tokenized AND logic.",
        "url_validation": "assignmentUrl validated with new URL() constructor in try/catch. Invalid URLs render as plain text to prevent broken links.",
        "layering": "Lives in src/ui/components/ because it's a feature component with complex state (filtering, sorting, modal), not a primitive/presentational component.",
        "a11y": "aria-sort attribute on sortable headers. Stable composite row keys for React reconciliation. Screen-reader-only caption with row count.",
        "percent_rounding": "gradePct always displayed as integer using Math.round() to avoid displaying '92.3333%'."
      },
      "commands": {
        "play": [
          "pnpm eslint src/ui/components/TableDetail.tsx",
          "pnpm tsc --noEmit",
          "pnpm test -t ui.TableDetail"
        ]
      }
    },
    "processing.toGridItems": {
      "id": "processing.toGridItems",
      "version": "1.1.0",
      "kind": "processing",
      "title": "Canvas assignments → GridItem[] (batched; returns url; no status in output)",
      "deps": [
        "data.assignmentsRaw@^1.0.0"
      ],
      "contracts": {
        "touch": [
          {
            "$ref": "node:data.assignmentsRaw@^1.0.0#types.CanvasAssignmentRaw"
          }
        ],
        "produces": {
          "GridItem": {
            "id": "string",
            "title": "string",
            "dueAt?": "iso8601",
            "points?": "int",
            "url": "string",
            "attentionType": "enum[Check|Thumb|Question|Warning|Hand]"
          }
        }
      },
      "signature": {
        "input": {
          "entries[]": {
            "assignment": {
              "$ref": "node:data.assignmentsRaw@^1.0.0#types.CanvasAssignmentRaw"
            },
            "checkpointStatus": "enum[Due|Missing|Submitted|Graded]"
          },
          "formatType": "enum[Prior|Weekday|Next]",
          "asOf": "iso8601",
          "timezone?": "IANA_tz"
        },
        "output[]": {
          "$ref": "#contracts.produces.GridItem"
        }
      },
      "processing": {
        "pipeline": [
          {
            "id": "toGridItems",
            "kind": "pure",
            "rules": [
              "Precompute once per call (do not recompute per element):",
              "- Parse `asOf` into the specified `timezone` (IANA) using date-fns-tz; fallback to ISO offset if no tz provided.",
              "- Derive `asOfWeekday` (0–6, Sun..Sat).",
              "- Compute `prevFridayInstant(asOf,tz)` and `prevDayInstant(asOf,tz)`.",
              "- Prepare formatters: `fmtMd` → 'M/d', `fmtEEE` → 'EEE'.",
              "For each entry in `entries` (preserve input order):",
              "- Map `id` ← assignment.id (required, non-empty).",
              "- Map `points` ← clamp(assignment.points_possible, min=0); omit if null/undefined *except* title always shows a number (use 0 when points missing).",
              "- Map `dueAt` ← assignment.due_at if valid ISO8601 *with timezone*; otherwise omit.",
              "- Map `url` ← assignment.html_url || assignment.url || compose from known ids; must start with http(s).",
              "- Build `name` ← trim and collapse internal whitespace from assignment.name.",
              "- Build `title` (depends on `formatType`; if `dueAt` missing, omit any date prefix):",
              "  • Prior:   `${fmtMd(dueAt)}: ${name} (${pointsOrZero})`",
              "  • Weekday: `${name} (${pointsOrZero})`",
              "  • Next:    `${fmtEEE(dueAt)}: ${name} (${pointsOrZero})`",
              "- Derive `attentionType` from `(checkpointStatus, dueAt, asOf)`:",
              "  • If checkpointStatus ∈ {Submitted, Graded} → 'Check'.",
              "  • Else if checkpointStatus = 'Due' → 'Thumb'.",
              "  • Else (checkpointStatus = 'Missing'):",
              "      – If asOf weekday ∈ {Sat,Sun,Mon} AND dueAt == previous Friday (same tz) → 'Question'.",
              "      – Else if asOf weekday ∈ {Tue,Wed,Thu,Fri} AND dueAt == (asOf - 1 day) (same tz) → 'Question'.",
              "      – Else → 'Warning'.",
              "Determinism requirements:",
              "- `fmtEEE(dueAt)` must match the actual weekday of `dueAt` in the chosen timezone (add test).",
              "- No global mutable state; memoize helpers inside the call.",
              "Validation per element (fail fast for that element, continue others):",
              "- `id` non-empty; `url` begins with http(s); if `dueAt` exists, it must be ISO8601-with-tz."
            ]
          }
        ]
      },
      "fixtures": {
        "inputs": {
          "weekday_batch": {
            "entries": [
              {
                "assignment": {
                  "id": "A-100",
                  "name": " Weekly Reflection  #3 ",
                  "due_at": "2025-10-02T23:59:00-07:00",
                  "points_possible": 25,
                  "html_url": "https://canvas.example/courses/42/assignments/100"
                },
                "checkpointStatus": "Due"
              },
              {
                "assignment": {
                  "id": "A-101",
                  "name": "Lab 2: Vectors",
                  "due_at": "2025-09-15T12:00:00Z",
                  "points_possible": 10,
                  "html_url": "https://canvas.example/courses/42/assignments/101"
                },
                "checkpointStatus": "Submitted"
              },
              {
                "assignment": {
                  "id": "A-102",
                  "name": "Project Draft",
                  "due_at": "2025-09-10T09:00:00Z",
                  "points_possible": 50,
                  "html_url": "https://canvas.example/courses/42/assignments/102"
                },
                "checkpointStatus": "Graded"
              },
              {
                "assignment": {
                  "id": "A-103",
                  "name": "Quiz 1",
                  "due_at": "2025-10-03T17:00:00-07:00",
                  "points_possible": 5,
                  "html_url": "https://canvas.example/courses/42/assignments/103"
                },
                "checkpointStatus": "Missing"
              },
              {
                "assignment": {
                  "id": "A-104",
                  "name": "Short Response",
                  "due_at": "2025-10-07T17:00:00-07:00",
                  "points_possible": 3,
                  "html_url": "https://canvas.example/courses/42/assignments/104"
                },
                "checkpointStatus": "Missing"
              },
              {
                "assignment": {
                  "id": "A-105",
                  "name": "Problem Set",
                  "due_at": "2025-10-01T17:00:00-07:00",
                  "points_possible": 20,
                  "html_url": "https://canvas.example/courses/42/assignments/105"
                },
                "checkpointStatus": "Missing"
              }
            ],
            "formatType": "Weekday",
            "asOf": "2025-10-08T09:00:00-07:00",
            "timezone": "America/Los_Angeles"
          },
          "prior_batch": {
            "entries": [
              {
                "assignment": {
                  "id": "A-103",
                  "name": "Quiz 1",
                  "due_at": "2025-10-03T17:00:00-07:00",
                  "points_possible": 5,
                  "html_url": "https://canvas.example/courses/42/assignments/103"
                },
                "checkpointStatus": "Missing"
              }
            ],
            "formatType": "Prior",
            "asOf": "2025-10-06T09:00:00-07:00",
            "timezone": "America/Los_Angeles"
          },
          "next_batch": {
            "entries": [
              {
                "assignment": {
                  "id": "A-105",
                  "name": "Problem Set",
                  "due_at": "2025-10-14T17:00:00-07:00",
                  "points_possible": 20,
                  "html_url": "https://canvas.example/courses/42/assignments/105"
                },
                "checkpointStatus": "Missing"
              }
            ],
            "formatType": "Next",
            "asOf": "2025-10-08T09:00:00-07:00",
            "timezone": "America/Los_Angeles"
          }
        },
        "expectations": {
          "weekday_batch": [
            {
              "id": "A-100",
              "title": "Weekly Reflection #3 (25)",
              "dueAt": "2025-10-02T23:59:00-07:00",
              "points": 25,
              "url": "https://canvas.example/courses/42/assignments/100",
              "attentionType": "Thumb"
            },
            {
              "id": "A-101",
              "title": "Lab 2: Vectors (10)",
              "dueAt": "2025-09-15T12:00:00Z",
              "points": 10,
              "url": "https://canvas.example/courses/42/assignments/101",
              "attentionType": "Check"
            },
            {
              "id": "A-102",
              "title": "Project Draft (50)",
              "dueAt": "2025-09-10T09:00:00Z",
              "points": 50,
              "url": "https://canvas.example/courses/42/assignments/102",
              "attentionType": "Check"
            },
            {
              "id": "A-103",
              "title": "Quiz 1 (5)",
              "dueAt": "2025-10-03T17:00:00-07:00",
              "points": 5,
              "url": "https://canvas.example/courses/42/assignments/103",
              "attentionType": "Warning"
            },
            {
              "id": "A-104",
              "title": "Short Response (3)",
              "dueAt": "2025-10-07T17:00:00-07:00",
              "points": 3,
              "url": "https://canvas.example/courses/42/assignments/104",
              "attentionType": "Question"
            },
            {
              "id": "A-105",
              "title": "Problem Set (20)",
              "dueAt": "2025-10-01T17:00:00-07:00",
              "points": 20,
              "url": "https://canvas.example/courses/42/assignments/105",
              "attentionType": "Warning"
            }
          ],
          "prior_batch": [
            {
              "id": "A-103",
              "title": "10/3: Quiz 1 (5)",
              "dueAt": "2025-10-03T17:00:00-07:00",
              "points": 5,
              "url": "https://canvas.example/courses/42/assignments/103",
              "attentionType": "Question"
            }
          ],
          "next_batch": [
            {
              "id": "A-105",
              "title": "Tue: Problem Set (20)",
              "dueAt": "2025-10-14T17:00:00-07:00",
              "points": 20,
              "url": "https://canvas.example/courses/42/assignments/105",
              "attentionType": "Warning"
            }
          ]
        }
      },
      "implementation": {
        "module": "src/lib/pure/toGridItems.ts",
        "export": "toGridItems",
        "pure": true
      },
      "ui_bindings": {
        "scratchpad": {
          "route": "/scratchpad?node=processing.toGridItems",
          "render": true,
          "cases": [
            {
              "label": "Weekday batch (6)",
              "input": "@fixtures.inputs.weekday_batch",
              "expect": "@fixtures.expectations.weekday_batch"
            },
            {
              "label": "Prior (prev Friday)",
              "input": "@fixtures.inputs.prior_batch",
              "expect": "@fixtures.expectations.prior_batch"
            },
            {
              "label": "Next (EEE prefix)",
              "input": "@fixtures.inputs.next_batch",
              "expect": "@fixtures.expectations.next_batch"
            }
          ]
        }
      },
      "tests": {
        "unit": [
          {
            "name": "maps_array_length_and_order",
            "jest": "inline",
            "code": "/* assert output.length equals input.entries.length and order preserved */"
          },
          {
            "name": "mix_of_statuses_attention_types",
            "jest": "inline",
            "code": "/* assert Check/Thumb/Question/Warning appear as expected */"
          },
          {
            "name": "title_formats_all_three_modes",
            "jest": "inline",
            "code": "/* assert (M/d: ...), (...), and (EEE: ...) respectively */"
          },
          {
            "name": "weekday_matches_dueAt",
            "jest": "inline",
            "code": "/* assert fmtEEE(dueAt) equals actual weekday of dueAt in tz */"
          },
          {
            "name": "url_mapping_trivial",
            "jest": "inline",
            "code": "/* assert url === assignment.html_url when present */"
          }
        ]
      },
      "guardrails": [
        "STOP_IF: eslint fails",
        "STOP_IF: tsc fails",
        "STOP_IF: any element has empty id",
        "STOP_IF: any element has url not starting with http(s)",
        "STOP_IF: any present dueAt is not ISO8601 with timezone",
        "STOP_IF: fmtEEE(dueAt) mismatches actual weekday (tz-aware)"
      ],
      "notes": {
        "date_lib": "Use date-fns-tz; do not implement tz math manually.",
        "memoize": "Memoize formatters and prev-day/prev-Friday checks inside call; no global mutable state.",
        "points_title": "Title always shows a number in parentheses; use 0 when points are missing.",
        "compat": "Keep single-item toGridItem as a thin wrapper around toGridItems for backwards compatibility."
      },
      "commands": {
        "play": [
          "pnpm eslint",
          "pnpm tsc",
          "pnpm test -t processing.toGridItems"
        ]
      }
    },
    "processing.getWeeklyGrids": {
      "id": "processing.getWeeklyGrids",
      "version": "1.0.3",
      "kind": "processing",
      "title": "Build WeeklyGrids for known students (rows per course; Prior | Mon–Fri | Next | No Date)",
      "deps": [
        "data.studentData@^1.0.0",
        "processing.toGridItems@^1.1.0"
      ],
      "contracts": {
        "touch": [
          { "$ref": "node:data.studentData@^1.0.0#types.StudentData" }
        ],
        "produces": {
          "WeeklyGrid": {
            "header": {
              "studentHeader": "string",
              "columns": [
                "Class Name",
                "Prior Weeks",
                "Mon (M/d)",
                "Tue (M/d)",
                "Wed (M/d)",
                "Thu (M/d)",
                "Fri (M/d)",
                "Next Week",
                "No Date"
              ],
              "monday": "iso8601",
              "timezone": "IANA_tz"
            },
            "rows[]": {
              "courseId": "string",
              "courseName": "string",
              "cells": {
                "prior[]": { "$ref": "node:processing.toGridItems@1.1.0#contracts.produces.GridItem" },
                "weekday": {
                  "Mon[]": { "$ref": "node:processing.toGridItems@1.1.0#contracts.produces.GridItem" },
                  "Tue[]": { "$ref": "node:processing.toGridItems@1.1.0#contracts.produces.GridItem" },
                  "Wed[]": { "$ref": "node:processing.toGridItems@1.1.0#contracts.produces.GridItem" },
                  "Thu[]": { "$ref": "node:processing.toGridItems@1.1.0#contracts.produces.GridItem" },
                  "Fri[]": { "$ref": "node:processing.toGridItems@1.1.0#contracts.produces.GridItem" }
                },
                "next[]": { "$ref": "node:processing.toGridItems@1.1.0#contracts.produces.GridItem" },
                "noDate": {
                  "count": "int",
                  "points": "int",
                  "label": "string",
                  "deepLinkUrl": "string"
                }
              },
              "summary": {
                "attentionCounts": {
                  "Check": "int",
                  "Thumb": "int",
                  "Question": "int",
                  "Warning": "int"
                },
                "totalItems": "int"
              }
            }
          }
        }
      },
      "signature": {
        "input": {
          "studentData": { "$ref": "node:data.studentData@^1.0.0#types.StudentData" },
          "asOf": "iso8601",
          "timezone?": "IANA_tz"
        },
        "output": {
          "studentId": {
            "summary": {
              "attentionCounts": {
                "Check": "int",
                "Thumb": "int",
                "Question": "int",
                "Warning": "int"
              },
              "totalItems": "int"
            },
            "grid": { "$ref": "#contracts.produces.WeeklyGrid" }
          }
        }
      },
      "processing": {
        "pipeline": [
            {
              "id": "determineWeekWindow",
              "kind": "pure",
              "rules": [
                "Parse `asOf` in the given `timezone` (IANA) using date-fns-tz; if no tz, use ISO offset.",
                "Compute mondayOfWeek(asOf, tz).",
                "Derive weekday labels Mon..Fri as 'EEE (M/d)'.",
                "Define buckets per course:",
                "  PRIOR: dueAt < Monday(asOf, tz) AND checkpointStatus = 'Missing'.",
                "  WEEKDAY: Monday..Friday inclusive (tz-aware dueAt between Mon 00:00 and Fri 23:59:59).",
                "  NEXT: dueAt > Friday(asOf, tz) 23:59:59.",
                "  NODATE: missing dueAt.",
                "Submitted/Graded before this week are excluded from WeeklyGrid."
              ]
            },
            {
              "id": "pullCourseGridAssignments(<courseId>)",
              "kind": "pure",
              "rules": [
                "Read this course's assignments with checkpointStatus from studentData (already scoped to the student).",
                "Partition exactly one of: PRIOR, one of WEEKDAY.Mon..Fri (tz-aware), NEXT, or NODATE.",
                "Entries for toGridItems:",
                "  PRIOR → formatType='Prior'; WEEKDAY.* → 'Weekday'; NEXT → 'Next'.",
                "NODATE: {count, points, label, deepLinkUrl}.",
                "All buckets (Prior, Mon..Fri, Next) must exist as keys; arrays may be empty."
              ]
            },
          {
            "id": "toGridItemsPerBucket",
            "kind": "pure",
            "rules": [
              "For each non-empty bucket (PRIOR, NEXT, each weekday with entries), call processing.toGridItems once (batched).",
              "Sort within each bucket by dueAt asc, then name asc before calling toGridItems.",
              "Place WEEKDAY results into Mon..Fri columns by the dueAt weekday (tz-aware).",
              "All buckets (Prior, Mon..Fri, Next) must exist as keys; arrays may be empty."
            ]
          },
          {
            "id": "assembleCourseRow",
            "kind": "pure",
            "rules": [
              "Compute attentionCounts subtotals across PRIOR + WEEKDAY.Mon..Fri + NEXT.",
              "Compute totalItems across those same outputs (exclude NODATE from attentionCounts; NODATE count/points live only in its cell).",
              "Assemble row {courseId, courseName, cells:{prior, weekday{Mon..Fri}, next, noDate}, summary}."
            ]
          },
            {
              "id": "assembleStudentGrid",
              "kind": "pure",
              "rules": [
                "Header.studentHeader = format student display name and attention summary:",
                "  - displayName = student.preferredName || student.legalName || student.name || studentId",
                "  - attentionSummary = '⚠️:{W} / ❓:{Q} / 👍:{T} / ✅:{C}' where {W}=Warning count, {Q}=Question count, {T}=Thumb count, {C}=Check count",
                "  - studentHeader = `${displayName} — ${attentionSummary}`",
                "Header.columns fixed as 9 columns in required order.",
                "Header.monday = mondayOfWeek(asOf, tz); Header.timezone = tz.",
                "Aggregate a student-level summary by summing the course-level attentionCounts and totalItems.",
                "Return an indexed object mapping studentId → { summary, grid }."
              ]
            }
        ]
      },
      "fixtures": {
        "inputs": {
          "two_students_small": {
            "studentData": {
              "students": {
                "S1": {
                  "studentId": "S1",
                  "meta": {
                    "preferredName": "Alice",
                    "legalName": "Alice Johnson"
                  },
                  "courses": {
                    "C-101": {
                      "courseId": "C-101",
                      "canvas": {
                        "name": "Algebra I"
                      },
                      "meta": {
                        "shortName": "Algebra I",
                        "period": "1"
                      },
                      "assignments": {
                        "A-0": {
                          "assignmentId": "A-0",
                          "courseId": "C-101",
                          "pointsPossible": 10,
                          "link": "https://app/assignments/A-0",
                          "canvas": {
                            "name": "Warmup",
                            "due_at": "2025-10-02T09:00:00-07:00",
                            "html_url": "https://app/assignments/A-0",
                            "points_possible": 10
                          },
                          "meta": {
                            "checkpointStatus": "Missing"
                          },
                          "submissions": {}
                        },
                        "A-1": {
                          "assignmentId": "A-1",
                          "courseId": "C-101",
                          "pointsPossible": 5,
                          "link": "https://app/assignments/A-1",
                          "canvas": {
                            "name": "Quiz 1",
                            "due_at": "2025-10-03T09:00:00-07:00",
                            "html_url": "https://app/assignments/A-1",
                            "points_possible": 5
                          },
                          "meta": {
                            "checkpointStatus": "Submitted"
                          },
                          "submissions": {}
                        },
                        "A-2": {
                          "assignmentId": "A-2",
                          "courseId": "C-101",
                          "pointsPossible": 25,
                          "link": "https://app/assignments/A-2",
                          "canvas": {
                            "name": "Reflection",
                            "due_at": "2025-10-07T09:00:00-07:00",
                            "html_url": "https://app/assignments/A-2",
                            "points_possible": 25
                          },
                          "meta": {
                            "checkpointStatus": "Due"
                          },
                          "submissions": {}
                        },
                        "A-3": {
                          "assignmentId": "A-3",
                          "courseId": "C-101",
                          "pointsPossible": 20,
                          "link": "https://app/assignments/A-3",
                          "canvas": {
                            "name": "Problem Set",
                            "due_at": "2025-10-10T09:00:00-07:00",
                            "html_url": "https://app/assignments/A-3",
                            "points_possible": 20
                          },
                          "meta": {
                            "checkpointStatus": "Missing"
                          },
                          "submissions": {}
                        },
                        "A-4": {
                          "assignmentId": "A-4",
                          "courseId": "C-101",
                          "pointsPossible": 5,
                          "link": "https://app/assignments/A-4",
                          "canvas": {
                            "name": "Project",
                            "html_url": "https://app/assignments/A-4",
                            "points_possible": 5
                          },
                          "meta": {
                            "checkpointStatus": "Submitted"
                          },
                          "submissions": {}
                        },
                        "A-5": {
                          "assignmentId": "A-5",
                          "courseId": "C-101",
                          "pointsPossible": 15,
                          "link": "https://app/assignments/A-5",
                          "canvas": {
                            "name": "Next Week Prep",
                            "due_at": "2025-10-14T09:00:00-07:00",
                            "html_url": "https://app/assignments/A-5",
                            "points_possible": 15
                          },
                          "meta": {
                            "checkpointStatus": "Due"
                          },
                          "submissions": {}
                        }
                      },
                      "orphanSubmissions": {}
                    }
                  }
                },
                "S2": {
                  "studentId": "S2",
                  "meta": {
                    "preferredName": "Bob",
                    "legalName": "Bob Smith"
                  },
                  "courses": {
                    "C-201": {
                      "courseId": "C-201",
                      "canvas": {
                        "name": "Biology"
                      },
                      "meta": {
                        "shortName": "Biology",
                        "period": "2"
                      },
                      "assignments": {
                        "B-1": {
                          "assignmentId": "B-1",
                          "courseId": "C-201",
                          "pointsPossible": 10,
                          "link": "https://app/assignments/B-1",
                          "canvas": {
                            "name": "Lab 1",
                            "due_at": "2025-10-10T09:00:00-07:00",
                            "html_url": "https://app/assignments/B-1",
                            "points_possible": 10
                          },
                          "meta": {
                            "checkpointStatus": "Submitted"
                          },
                          "submissions": {}
                        },
                        "B-2": {
                          "assignmentId": "B-2",
                          "courseId": "C-201",
                          "pointsPossible": 15,
                          "link": "https://app/assignments/B-2",
                          "canvas": {
                            "name": "Worksheet",
                            "html_url": "https://app/assignments/B-2",
                            "points_possible": 15
                          },
                          "meta": {
                            "checkpointStatus": "Submitted"
                          },
                          "submissions": {}
                        },
                        "B-3": {
                          "assignmentId": "B-3",
                          "courseId": "C-201",
                          "pointsPossible": 10,
                          "link": "https://app/assignments/B-3",
                          "canvas": {
                            "name": "Reading",
                            "due_at": "2025-10-15T09:00:00-07:00",
                            "html_url": "https://app/assignments/B-3",
                            "points_possible": 10
                          },
                          "meta": {
                            "checkpointStatus": "Due"
                          },
                          "submissions": {}
                        }
                      },
                      "orphanSubmissions": {}
                    }
                  }
                }
              }
            },
            "asOf": "2025-10-08T09:00:00-07:00",
            "timezone": "America/Los_Angeles"
          }
        },
        "expectations": {
          "two_students_small": {
            "S1": {
              "summary": {
                "attentionCounts": { "Check": 0, "Thumb": 2, "Question": 0, "Warning": 2 },
                "totalItems": 4
              },
              "grid": {
                "header": {
                  "studentHeader": "Alice — ⚠️:2 / ❓:0 / 👍:2 / ✅:0",
                  "columns": [
                    "Class Name",
                    "Prior Weeks",
                    "Mon (10/6)",
                    "Tue (10/7)",
                    "Wed (10/8)",
                    "Thu (10/9)",
                    "Fri (10/10)",
                    "Next Week",
                    "No Date"
                  ],
                  "monday": "2025-10-06T07:00:00.000Z",
                  "timezone": "America/Los_Angeles"
                },
                "rows": [
                  {
                    "courseId": "C-101",
                    "courseName": "Algebra I",
                    "cells": {
                      "prior": [
                        { "id": "A-0", "title": "10/2: Warmup (10)", "dueAt": "2025-10-02T09:00:00-07:00", "points": 10, "attentionType": "Warning", "url": "https://app/assignments/A-0" }
                      ],
                      "weekday": {
                        "Mon": [],
                        "Tue": [
                          { "id": "A-2", "title": "Reflection (25)", "dueAt": "2025-10-07T09:00:00-07:00", "points": 25, "attentionType": "Thumb", "url": "https://app/assignments/A-2" }
                        ],
                        "Wed": [],
                        "Thu": [],
                        "Fri": [
                          { "id": "A-3", "title": "Problem Set (20)", "dueAt": "2025-10-10T09:00:00-07:00", "points": 20, "attentionType": "Warning", "url": "https://app/assignments/A-3" }
                        ]
                      },
                      "next": [
                        { "id": "A-5", "title": "Tue: Next Week Prep (15)", "dueAt": "2025-10-14T09:00:00-07:00", "points": 15, "attentionType": "Thumb", "url": "https://app/assignments/A-5" }
                      ],
                      "noDate": {
                        "count": 1,
                        "points": 5,
                        "label": "1 no due date (5 points)",
                        "deepLinkUrl": "https://app/detail?student=S1&course=C-101&nodate=1"
                      }
                    },
                    "summary": {
                      "attentionCounts": { "Check": 0, "Thumb": 2, "Question": 0, "Warning": 2 },
                      "totalItems": 4
                    }
                  }
                ]
              }
            },
            "S2": {
              "summary": {
                "attentionCounts": { "Check": 1, "Thumb": 1, "Question": 0, "Warning": 0 },
                "totalItems": 2
              },
              "grid": {
                "header": {
                  "studentHeader": "Bob — ⚠️:0 / ❓:0 / 👍:1 / ✅:1",
                  "columns": [
                    "Class Name",
                    "Prior Weeks",
                    "Mon (10/6)",
                    "Tue (10/7)",
                    "Wed (10/8)",
                    "Thu (10/9)",
                    "Fri (10/10)",
                    "Next Week",
                    "No Date"
                  ],
                  "monday": "2025-10-06T07:00:00.000Z",
                  "timezone": "America/Los_Angeles"
                },
                "rows": [
                  {
                    "courseId": "C-201",
                    "courseName": "Biology",
                    "cells": {
                      "prior": [],
                      "weekday": {
                        "Mon": [],
                        "Tue": [],
                        "Wed": [],
                        "Thu": [],
                        "Fri": [
                          { "id": "B-1", "title": "Lab 1 (10)", "dueAt": "2025-10-10T09:00:00-07:00", "points": 10, "attentionType": "Check", "url": "https://app/assignments/B-1" }
                        ]
                      },
                      "next": [
                        { "id": "B-3", "title": "Wed: Reading (10)", "dueAt": "2025-10-15T09:00:00-07:00", "points": 10, "attentionType": "Thumb", "url": "https://app/assignments/B-3" }
                      ],
                      "noDate": {
                        "count": 1,
                        "points": 15,
                        "label": "1 no due date (15 points)",
                        "deepLinkUrl": "https://app/detail?student=S2&course=C-201&nodate=1"
                      }
                    },
                    "summary": {
                      "attentionCounts": { "Check": 1, "Thumb": 1, "Question": 0, "Warning": 0 },
                      "totalItems": 2
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "tests": {
        "unit": [
          { "name": "builds_two_student_grids" },
          { "name": "weekday_bucketing_tz_aware" },
          { "name": "noDate_label_and_counts" },
          { "name": "summary_attention_counts_and_totalItems" },
          { "name": "one_batched_call_per_nonempty_bucket" },
          { "name": "weekday_no_assignments_displays_empty" },
          { "name": "indexed_lookup_is_direct" }
        ],
        "integration": [
          { "name": "two_students_small_fixture_matches" }
        ]
      },
      "guardrails": [
        "STOP_IF: eslint fails",
        "STOP_IF: tsc fails",
        "STOP_IF: header columns not exactly the 9 required (order must match)",
        "STOP_IF: any row missing any required cell group",
        "STOP_IF: any bucket missing — Prior, Mon..Fri, Next must exist as keys even if empty",
        "STOP_IF: Mon..Fri labels do not match mondayOfWeek(asOf,tz)",
        "STOP_IF: any emitted GridItem has url not http(s)"
      ],
      "definition_of_done": {
        "developer_must": [
          "Produce scratchpad view for node: /scratchpad?node=processing.getWeeklyGrids",
          "Render full output object with at least S1 and S2 keys; show each {summary, grid.header, grid.rows}",
          "Support direct result[selectedStudentId] lookup without array iteration",
          "Verify Prior, Mon..Fri, Next buckets exist even when empty",
          "Pass ESLint, TSC, and unit/integration tests"
        ],
        "po_review": [
          "Visually verify header labels and Monday anchor",
          "Visually verify per-course rows with Prior/Mon..Fri/Next/No Date",
          "Verify student-level summary counts",
          "Approve or request changes before any commit"
        ]
      },
      "notes": {
        "status_source": "Use checkpointStatus from studentData only.",
        "batching": "Per course: at most 7 batched calls to toGridItems (PRIOR, NEXT, each weekday with entries).",
        "ordering": "Stable sort by dueAt asc, then name asc within each bucket.",
        "noDate": "Provide a human-readable 'label' alongside count/points and deepLinkUrl.",
        "tz": "Use date-fns-tz; no manual TZ math."
      },
      "commands": {
        "play": [
          "pnpm eslint",
          "pnpm tsc",
          "pnpm test -t processing.getWeeklyGrids"
        ]
      }
    },
    "ui.WeeklyGrid": {
      "id": "ui.WeeklyGrid",
      "version": "1.0.2",
      "kind": "ui",
      "title": "WeeklyGrid table view (render-only over processing.getWeeklyGrids)",
      "deps": [
        "processing.getWeeklyGrids@^1.0.3"
      ],
      "contracts": {
        "touch": [
          { "$ref": "node:processing.getWeeklyGrids@^1.0.3#contracts.produces.WeeklyGrid" }
        ],
        "produces": {
          "component": "React.FunctionComponent"
        }
      },
      "signature": {
        "input": {
          "grids": "Record<studentId, { summary: { attentionCounts: { Check:int, Thumb:int, Question:int, Warning:int }, totalItems:int }, grid: { header:{ studentHeader:string, columns:string[], monday:iso8601, timezone:IANA_tz }, rows: any[] } }>",
          "selectedStudentId?": "string"
        },
        "output": { "react": "JSX.Element" }
      },
      "implementation": {
        "module": "src/components/WeeklyGrid.tsx",
        "export": "WeeklyGrid",
        "layer": "ui",
        "tags": ["table","weekly","grid"]
      },
      "processing": {
        "pipeline": [
          {
            "id": "renderHeader",
            "kind": "pure",
            "rules": [
              "Render header.studentHeader in a <th colSpan={9}> row ABOVE the column headers row.",
              "Student header styling: bg-gray-50, border-b-2 border-gray-400, font-bold, text-lg, left-aligned.",
              "Render header.columns (9 fixed) in provided order below student header.",
              "Display day labels exactly as given; do not compute or reformat.",
              "Highlight the 'today' column by computing 'now' in header.timezone.",
              "If 'now' falls on Sat/Sun, highlight Monday instead."
            ]
          },
          {
            "id": "selectStudents",
            "kind": "pure",
            "rules": [
              "If selectedStudentId is provided, render ONLY grids[selectedStudentId].",
              "Otherwise, render all students in the iteration order of Object.keys(grids).",
              "Do not refetch or recompute anything; this is purely a render filter."
            ]
          },
          {
            "id": "renderStudentSection",
            "kind": "pure",
            "rules": [
              "Student header is pre-formatted in grid.header.studentHeader; render as-is without any formatting logic.",
              "Render course rows from grid.rows in the order provided (already sorted upstream).",
              "Assume grid.rows[].courseName is the final display name (shortName resolved upstream from course meta). Do not alter or derive names in UI."
            ]
          },
          {
            "id": "renderCourseRows",
            "kind": "pure",
            "rules": [
              "Each course row renders exactly 9 cells: Prior, Mon..Fri, Next, No Date.",
              "All cells must exist even if empty.",
              "For cells containing GridItem[], render items in the order provided (already sorted upstream).",
              "Do not compute buckets, titles, dates, or status in UI."
            ]
          },
          {
            "id": "renderGridItem",
            "kind": "pure",
            "rules": [
              "Render each GridItem as an <a> tag with text=title, href=url, target=_blank, rel=noopener noreferrer.",
              "Icon/color mapping by attentionType:",
              "  - Check → prefix '✅' and green text",
              "  - Thumb → prefix '👍' and blue text",
              "  - Question → prefix '❓' and red text",
              "  - Warning → prefix '⚠️' and red text with a yellow text highlight (e.g., background highlight)",
              "Never modify title or recompute attentionType in the UI."
            ]
          },
          {
            "id": "renderNoDate",
            "kind": "pure",
            "rules": [
              "Render the provided noDate.label as plain text.",
              "If noDate.count > 0 and noDate.deepLinkUrl is non-empty, render it as a link (target=_blank, rel=noopener).",
              "If noDate.count = 0, render nothing (empty cell).",
              "No buttons or callbacks; links only."
            ]
          },
          {
            "id": "accessibility_and_responsiveness",
            "kind": "pure",
            "rules": [
              "Use semantic <table> with <thead>/<tbody>; header cells are <th scope='col'>.",
              "Ensure keyboard focus states on all links; visible focus ring.",
              "Sticky header and horizontal scroll on narrow viewports; wrap long titles."
            ]
          }
        ]
      },
      "fixtures": {
        "inputs": {
          "tiny_render": {
            "grids": {
              "S1": {
                "summary": { "attentionCounts": { "Check": 0, "Thumb": 1, "Question": 0, "Warning": 1 }, "totalItems": 2 },
                "grid": {
                  "header": {
                    "studentHeader": "S1 — ⚠️:1 / ❓:0 / 👍:1 / ✅:0",
                    "columns": ["Class Name","Prior Weeks","Mon (10/6)","Tue (10/7)","Wed (10/8)","Thu (10/9)","Fri (10/10)","Next Week","No Date"],
                    "monday": "2025-10-06T00:00:00-07:00",
                    "timezone": "America/Los_Angeles"
                  },
                  "rows": [
                    {
                      "courseId": "C-101",
                      "courseName": "Alg I",
                      "cells": {
                        "prior": [{ "id": "A-0", "title": "10/2: Warmup (10)", "attentionType": "Warning", "url": "https://app/assignments/A-0" }],
                        "weekday": { "Mon": [], "Tue": [{ "id": "A-2", "title": "Reflection (25)", "attentionType": "Thumb", "url": "https://app/assignments/A-2" }], "Wed": [], "Thu": [], "Fri": [] },
                        "next": [],
                        "noDate": { "count": 0, "points": 0, "label": "", "deepLinkUrl": "" }
                      },
                      "summary": { "attentionCounts": { "Check": 0, "Thumb": 1, "Question": 0, "Warning": 1 }, "totalItems": 2 }
                    }
                  ]
                }
              }
            },
            "selectedStudentId": "S1"
          }
        },
        "expectations": {
          "tiny_render": {
            "renders": [
              "Table with 9 headers exactly as provided.",
              "Only student S1 section is rendered when selectedStudentId='S1'.",
              "Student header shows '⚠️:1 / ❓:0 / 👍:1 / ✅:0'.",
              "Course row 'Alg I' shows Tue cell with 'Reflection (25)' and Prior cell with '10/2: Warmup (10)'.",
              "No Date cell renders nothing (blank).",
              "Links open in a new tab with rel=noopener noreferrer.",
              "Today column highlight is based on current date in 'America/Los_Angeles'; weekend → highlight Monday."
            ]
          }
        }
      },
      "tests": {
        "unit": [
          { "name": "renders_headers_from_compose_header" },
          { "name": "highlights_today_or_monday_on_weekend" },
          { "name": "renders_all_cells_even_if_empty" },
          { "name": "renders_icons_and_colors_by_attentionType" },
          { "name": "renders_only_selected_student_when_selectedStudentId_present" }
        ],
        "integration": [
          { "name": "renders_links_correctly_and_focusable" },
          { "name": "renders_rows_in_given_order_without_resorting" }
        ]
      },
      "guardrails": [
        "STOP_IF: component imports from src/lib/data or src/lib/pure directly (UI must depend on compose output only).",
        "STOP_IF: UI recomputes bucketing, titles, day labels, or attention types.",
        "STOP_IF: header columns count/order diverge from compose header.",
        "STOP_IF: any GridItem rendered without a valid http(s) url.",
        "STOP_IF: any of the 9 cells is missing (cells must exist even if empty).",
        "STOP_IF: No Date cell uses buttons or callbacks (links only when count>0 and deepLinkUrl provided)."
      ],
      "definition_of_done": {
        "developer_must": [
          "Render from provided 'grids' without re-bucketing, sorting, or title/status recomputation.",
          "Use current time in header.timezone to highlight today's column; weekend → highlight Monday.",
          "Render only the selected student when selectedStudentId is set.",
          "Respect provided row order and courseName as the final display label.",
          "Pass ESLint, TSC, unit + integration tests."
        ],
        "po_review": [
          "Visually confirm header/columns and today-highlighting behavior.",
          "Confirm only selected student renders when filtered.",
          "Confirm icons/colors: Question=red, Warning=red with yellow text highlight.",
          "Confirm No Date link behavior and em-dash rendering for empty."
        ]
      },
      "notes": {
        "compose_contract": "Compose guarantees grid.header and grid.rows are display-ready: rows sorted by course meta.period ascending; courseName already resolved from course meta.shortName (fallback upstream); cells populated and ordered.",
        "a11y": "Semantic table, focusable links, visible focus outlines.",
        "perf": "Memoize per-row render; consider virtualization later for very large datasets."
      },
      "commands": {
        "play": [
          "pnpm eslint",
          "pnpm tsc",
          "pnpm test -t ui.WeeklyGrid"
        ]
      }
    },
    "page.Assignments": {
      "id": "page.Assignments",
      "version": "1.0.1",
      "kind": "page",
      "title": "Assignments page — route-level container for WeeklyGrid",
      "deps": [
        "ui.WeeklyGrid@^1.0.2"
      ],
      "contracts": {
        "touch": [
          { "$ref": "node:ui.WeeklyGrid@^1.0.2#contracts.produces.component" }
        ],
        "produces": {
          "route": "/assignments",
          "component": "NextPage"
        }
      },
      "signature": {
        "input": {
          "grids": "Record<studentId, StudentWeeklyGrid>",
          "selectedStudentId": "string"
        },
        "output": { "react": "JSX.Element" }
      },
      "implementation": {
        "module": "src/app/assignments/page.tsx",
        "export": "default",
        "layer": "page",
        "tags": ["assignments","weekly","grid","container"]
      },
      "processing": {
        "pipeline": [
          {
            "id": "renderLayout",
            "kind": "ui",
            "rules": [
              "Render ui.WeeklyGrid with props: { grids, selectedStudentId }.",
              "Do not re-bucket, filter, or sort data; UI depends entirely on provided props.",
              "Do not render page title or student selector; header/navigation handles that globally."
            ]
          }
        ]
      },
      "fixtures": {
        "inputs": {
          "student_selected": {
            "grids": { "...": "see processing.getWeeklyGrids.fixture.expectations.two_students_small" },
            "selectedStudentId": "S1"
          }
        },
        "expectations": {
          "student_selected": {
            "renders": [
              "WeeklyGrid component is mounted with selectedStudentId=S1.",
              "Only S1's grid is rendered.",
              "Changing selectedStudentId at the header level and re-rendering the page updates the grid."
            ]
          }
        }
      },
      "tests": {
        "unit": [
          { "name": "passes_props_to_WeeklyGrid" }
        ],
        "integration": [
          { "name": "rerenders_grid_when_selectedStudentId_changes_from_header" }
        ]
      },
      "guardrails": [
        "STOP_IF: page re-implements bucketing or summary logic.",
        "STOP_IF: page attempts to render student dropdown or page title.",
        "STOP_IF: ui.WeeklyGrid is mounted without a selectedStudentId."
      ],
      "definition_of_done": {
        "developer_must": [
          "Mount ui.WeeklyGrid with grids and selectedStudentId from props.",
          "Pass ESLint, TSC, unit + integration tests."
        ],
        "po_review": [
          "Confirm page renders only the selected student's grid, no extras.",
          "Confirm grid updates correctly when selectedStudentId is changed by the header."
        ]
      },
      "notes": {
        "routing": "Page mounted at /assignments. Student selection comes from global header/navigation state, not this page.",
        "future": "Detail page (/assignments/[studentId]) may be added later."
      },
      "commands": {
        "play": [
          "pnpm eslint",
          "pnpm tsc",
          "pnpm test -t page.Assignments"
        ]
      }
    }
  },
  "project": {
    "id": "checkpoint",
    "name": "Checkpoint",
    "version": "2025.10",
    "description": "Full-stack web app for weekly assignment views and workflows.",
    "owners": [
      "po@susansomerset.com"
    ],
    "repo": "github.com/susansomerset/checkpoint"
  },
  "tech_stack": {
    "language": "TypeScript",
    "runtime": "Node 20.x",
    "frontend": {
      "framework": "Next.js 14",
      "styling": "Tailwind",
      "test": "Vitest + React Testing Library"
    },
    "backend": {
      "framework": "Next API routes",
      "validation": "zod"
    },
    "dates": {
      "tz_lib": "date-fns-tz"
    },
    "build": "pnpm",
    "formatting": {
      "lint": "ESLint",
      "format": "Prettier"
    }
  },
  "dependencies": {
    "runtime": [
      "zod@^3",
      "date-fns@^3",
      "date-fns-tz@^2"
    ],
    "dev": [
      "typescript@^5",
      "vitest@^1",
      "@types/node@^20",
      "eslint@^9",
      "prettier@^3"
    ]
  },
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "eslint": "eslint .",
    "tsc": "tsc -p tsconfig.json --noEmit",
    "test:unit": "vitest run",
    "spec:compile": "node spec/scripts/spec-compile.mjs",
    "spec:lint": "node spec/scripts/spec-lint.mjs",
    "spec:diff": "node spec/scripts/spec-diff.mjs",
    "ci": "pnpm spec:compile && pnpm spec:lint && pnpm eslint && pnpm tsc && pnpm test:unit"
  },
  "environments": {
    "required_env": [
      "NEXT_PUBLIC_APP_URL",
      "CANVAS_API_BASE",
      "CANVAS_API_TOKEN"
    ],
    "fail_closed": true
  },
  "directories": {
    "spec_root": "spec/",
    "spec_current": "spec/current.json",
    "spec_versions": "spec/versions/",
    "fixtures": "tests/fixtures/",
    "pure_impl": "src/lib/pure/",
    "tests_unit": "src/lib/pure/__tests__/",
    "scratchpad_route": "src/app/scratchpad/page.tsx"
  },
  "conventions": {
    "naming": {
      "variables": "camelCase",
      "types": "PascalCase",
      "files": "kebab-case.ts"
    },
    "comments": "Prefer 'why' over 'what'; reference spec node id when non-obvious.",
    "data_flow": {
      "prefer_pass_data": true,
      "no_duplicate_calls": true,
      "immutability_pure": true,
      "max_params_per_fn": 4
    },
    "coding_rules": {
      "no_any": true,
      "strict_null_checks": true
    },
    "security": {
      "no_secrets_in_code": true,
      "allowed_url_schemes": [
        "http",
        "https"
      ]
    }
  },
  "ci": {
    "gates": [
      "spec:compile must produce spec/current.json + spec/lock.json matching versions/*",
      "spec:lint passes (urls http(s), tz weekday checks, fixtures exist)",
      "eslint passes",
      "tsc (typecheck) passes",
      "unit tests pass",
      "PO approval confirmed in Cursor chat before commit",
      "Affected nodes logged in spec/fixlog.md with commit hash once merged"
    ]
  },
  "policies": {
    "layering": [
      "Compose thinks, UI renders. No business logic or data transformation in UI or Page components.",
      "Page components must remain logic-free: pass context data down, render only.",
      "Pure functions are not called directly from UI or Page components; they are always called through compose or context layers."
    ],
    "approval": [
      "NOTHING gets committed until PO has approved in Cursor chat. FFS.",
      "Affected nodes must be logged in spec/fixlog.md with commit hash once merged."
    ],
    "testing": [
      "Each implementation must pass ESLint, TypeScript (tsc), and all jest/unit tests before PO review.",
      "Playwright/E2E tests must be green before tagging a release."
    ],
    "ui": [
      "Font text is black unless conditionally formatted in the UI spec.",
      "Conditional formatting rules must be specified explicitly in the spec node."
    ],
    "data": [
      "Empty arrays or objects must still be represented as keys in the output (never omit expected keys).",
      "Adapter functions are responsible for handling empty data gracefully without introducing errors.",
      "Failmodes/exception handling must be explicitly documented in each spec node so behavior is predictable when data is missing, malformed, or stale.",
      "No live auth in CI; use mocks or cassettes for API tests."
    ],
    "narration": {
      "required": true,
      "format": "console one-liners",
      "steps": [
        "spec_saved/spec_appended",
        "fixtures_written",
        "impl_stub_created",
        "tests_added",
        "eslint_passed",
        "typecheck_passed",
        "tests_green",
        "scratchpad_ready_for_PO"
      ]
    }
  },
  "_generated_at": "2025-09-30T18:56:56.750440Z"
}
